#!/bin/sh
#
# Automatically format and mount persistent storage
#


start() {
  echo -n "Automounting: "
  local magic="dhyve, please format-me"
  local label=dhyve-data
  local datapart=$(blkid | grep dhyve-data | awk -F: '{print $1}')

  if [ -z "$datapart" ]; then
    local unpartitioned=$(fdisk -l | grep "doesn't contain a valid partition table" | head -n 1 | sed 's/Disk \(.*\) doesn.*/\1/')

    if [ -n "$unpartitioned" ]; then
      local header=$(dd if=$unpartitioned bs=1 count=${#magic} 2>/dev/null)

      if [ "$header" == "$magic" ]; then
        dd if=$unpartitioned of=/userdata.tar bs=1 count=4096 2>/dev/null
        (echo n; echo p; echo 2; echo ;echo +1000M; echo t; echo 82; echo n; echo p; echo 1; echo ;echo ;echo w) | fdisk $unpartitioned

        local timer=0
        while [ "$timer" -lt 10 -a \(! -b "${unpartitioned}1" -o ! -b "${unpartitioned}2" \)]; do
          timer=$((timer + 1))
          sleep 1
        done

        mkswap "${unpartitioned}2"
        swapon "${unpartitioned}2"
        datapart=$(echo "${unpartitioned}1")
        mkfs.ext4 -L $label $datapart
      fi
    fi
  fi

  if [ -n "$datapart" ]; then
    local partname=$(echo "$datapart" | sed 's/.*\///')
    mkdir -p /mnt/$partname
    mount $datapart /mnt/$partname 2>/dev/null
    mkdir -p /mnt/$partname/var/lib/docker
    mkdir -p /mnt/$partname/etc
    mkdir -p /mnt/$partname/work/etc

    mount -t overlay overlay -o lowerdir=/etc,upperdir=/mnt/$partname/etc,workdir=/mnt/$partname/work/etc /etc
    ln -sf /mnt/$partname/var/lib/docker /var/lib/docker

    if [ -e "/userdata.tar" ]; then
      mv /userdata.tar /mnt/$partname/
    fi

    if [ -e "/mnt/${partname}/userdata.tar" ]; then
      tar xf /mnt/${partname}/userdata.tar -C /home/docker >/var/log/userdata.log 2>&1
      rm -f '/home/docker/dhyve, please format-me'
    fi
  fi

  echo "OK"
}

stop() {
  echo ""
}

restart() {
  echo ""
}

case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart|reload)
    restart
    ;;
  *)
    echo "Usage: $0 {start|stop|restart}"
    exit 1
esac

exit $?
